- if flash[:notice]
  = flash[:notice]
  %hr
- elsif flash[:error]
  = flash[:error]
  %hr

%h2 Repositories using #{@gem_name}

%h3 Latest version: #{@latest_gem_version&.version}

%p
  = form_tag('', method: :get) do |f|
    = label_tag(:from_version, 'From version:')
    = text_field_tag(:from_version, params[:from_version])
    = label_tag(:to_version, 'To version:')
    = text_field_tag(:to_version, params[:to_version])
    = submit_tag('Filter')

%table
  %thead
    %tr
      %th Repository
      %th Path
      %th Version
      %th Status
  %tbody
    - @repositories.each do |repository|
      %tr
        %td= link_to(repository.canonical_name, repository_path(repository.id))
        %td= link_to(repository.gem_path, repository.url(repository.gem_path))
        %td= repository.gem_version
        %td
          - status = GemCollector::RepositoryGem.status(repository.gem_version, @latest_gem_version&.version)
          %span{style: "color: ##{status == GemCollector::RepositoryGem::Status::LATEST   ? "5cb85c" : "f0f0f2"};"}●
          %span{style: "color: ##{status == GemCollector::RepositoryGem::Status::BEHIND   ? "f0ad4e" : "f0f0f2"};"}●
          %span{style: "color: ##{status == GemCollector::RepositoryGem::Status::OUTDATED ? "d9534f" : "f0f0f2"};"}●

%hr

= link_to('Create news issues on these repositories', new_gem_news_path(**params.permit(:name, :from_version, :to_version).to_h.symbolize_keys))
